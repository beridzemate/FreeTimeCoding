//
// File autogenerated from Include/C/Baselib_Thread.h
//

using System;
using System.Runtime.InteropServices;
using UnityEngine.Bindings;
using size_t = System.UIntPtr;

namespace Unity.Baselib.LowLevel
{
    [NativeHeader("baselib/CSharp/BindingsUnity/Baselib_Thread.gen.binding.h")]
    internal static unsafe partial class Binding
    {
        /// <summary>Baselib_Thread_Id that is guaranteed not to represent a thread</summary>
        public static readonly IntPtr Baselib_Thread_InvalidId = IntPtr.Zero;
        /// <summary>
        /// Max number of characters for threadnames internal to baselib. Used for name in Baselib_Thread_Config
        /// In practice thread implementation on some platforms support even fewer characters for names
        /// </summary>
        public static readonly size_t Baselib_Thread_MaxThreadNameLength = new size_t(64);
        /// <summary>Yields the execution context of the current thread to other threads, potentially causing a context switch.</summary>
        /// <remarks>The operating system may decide to not switch to any other thread.</remarks>
        [FreeFunction(IsThreadSafe = true)]
        public static extern void Baselib_Thread_YieldExecution();
        /// <summary>Return the thread id of the current thread, i.e. the thread that is calling this function</summary>
        [FreeFunction(IsThreadSafe = true)]
        public static extern IntPtr Baselib_Thread_GetCurrentThreadId();
    }
}
